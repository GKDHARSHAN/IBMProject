pipeline {
    agent any
    environment {
        JIRA_SITE = 'jenkins-jira'
        JIRA_ISSUE = 'MJP-1'
        SLACK_CHANNEL = '#general'
        SLACK_COLOR_SUCCESS = 'good'
        SLACK_COLOR_FAILURE = 'danger'
        DOCKER_IMAGE = 'myapp:latest'
        CONTAINER_NAME = 'my_container'
        PROMETHEUS_CONTAINER = 'prometheus_container'
        HOST_PORT = '8081'
        CONTAINER_PORT = '8000'
    }
    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Building the project...'
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    echo 'Running tests...'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image...'
                    bat "docker build -t ${env.DOCKER_IMAGE} ."
                }
            }
        }
        stage('Run Docker Containers') {
            steps {
                script {
                    echo 'Stopping existing containers...'
                    bat "docker stop ${env.CONTAINER_NAME} || echo 'No running container to stop'"
                    bat "docker rm ${env.CONTAINER_NAME} || echo 'No container to remove'"
                    bat "docker stop ${env.PROMETHEUS_CONTAINER} || echo 'No Prometheus container to stop'"
                    bat "docker rm ${env.PROMETHEUS_CONTAINER} || echo 'No Prometheus container to remove'"

                    echo 'Running Docker Container...'
                    bat "docker run -d --name ${env.CONTAINER_NAME} -p ${env.HOST_PORT}:${env.CONTAINER_PORT} ${env.DOCKER_IMAGE}"

                    echo 'Running Prometheus Container...'
                    bat "docker run -d --name ${env.PROMETHEUS_CONTAINER} -p 9090:9090 -v ${WORKSPACE}/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus"
                }
            }
        }
    }
    post {
        success {
            script {
                slackSend (
                    channel: env.SLACK_CHANNEL,
                    color: env.SLACK_COLOR_SUCCESS,
                    message: "✅ Build successful! Build ID: ${env.BUILD_NUMBER}",
                    username: 'jenkins',
                    iconEmoji: ':tada:'
                )
                try {
                    jiraAddComment idOrKey: env.JIRA_ISSUE, comment: "✅ Build Successful! Build ID: ${env.BUILD_NUMBER}"
                    jiraTransitionIssue idOrKey: env.JIRA_ISSUE, transition: "Done"
                    echo "✅ JIRA Issue ${env.JIRA_ISSUE} updated successfully!"
                } catch (Exception e) {
                    echo "❌ JIRA update failed: ${e.getMessage()}"
                }
            }
        }
        failure {
            script {
                slackSend (
                    channel: env.SLACK_CHANNEL,
                    color: env.SLACK_COLOR_FAILURE,
                    message: "❌ Build failed! Build ID: ${env.BUILD_NUMBER}",
                    username: 'jenkins',
                    iconEmoji: ':no_entry_sign:'
                )
                try {
                    jiraAddComment idOrKey: env.JIRA_ISSUE, comment: "❌ Build Failed! Build ID: ${env.BUILD_NUMBER}"
                    jiraTransitionIssue idOrKey: env.JIRA_ISSUE, transition: "Reopen"
                } catch (Exception e) {
                    echo "❌ JIRA update failed: ${e.getMessage()}"
                }
            }
        }
    }
}
