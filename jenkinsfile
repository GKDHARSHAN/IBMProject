pipeline {
    agent any
    environment {
        GITHUB_REPO = 'https://github.com/GKDHARSHAN/IBMProject.git'
        JIRA_SITE = 'jenkins-jira'
        JIRA_ISSUE = 'MJP-1'
        SLACK_CHANNEL = '#general'
        SLACK_COLOR_SUCCESS = 'good'
        SLACK_COLOR_FAILURE = 'danger'
        DOCKER_IMAGE = 'myapp:latest'
        CONTAINER_NAME = 'my_container'
        HOST_PORT = '8081'
        CONTAINER_PORT = '80'
        PROMETHEUS_CONFIG_PATH = "${WORKSPACE}/IBMProject/prometheus.yml"  // Path to prometheus.yml from repo
    }
    stages {
        stage('Clone Repo') {
            steps {
                git url: "${GITHUB_REPO}", branch: 'main'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image...'
                    bat 'docker build -t %DOCKER_IMAGE% .'  // Using Windows command
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Stopping any existing container...'
                    bat "docker stop %CONTAINER_NAME% || exit 0"
                    bat "docker rm %CONTAINER_NAME% || exit 0"

                    echo 'Running Docker Container...'
                    bat "docker run -d --name %CONTAINER_NAME% -p %HOST_PORT%:%CONTAINER_PORT% %DOCKER_IMAGE%"

                    echo 'Checking if Prometheus container is running...'
                    def prometheusExists = bat(script: "docker ps -q -f name=prometheus", returnStdout: true).trim()

                    if (prometheusExists) {
                        echo 'Prometheus container is already running. Stopping and removing the existing container...'
                        bat "docker stop prometheus || exit 0"
                        bat "docker rm prometheus || exit 0"
                    }

                    echo 'Running Prometheus Container...'
                    bat "docker run -d -p 9090:9090 -v ${PROMETHEUS_CONFIG_PATH}:\\etc\\prometheus\\prometheus.yml prom/prometheus"
                }
            }
        }
    }
    post {
        success {
            script {
                slackSend (
                    channel: env.SLACK_CHANNEL,
                    color: env.SLACK_COLOR_SUCCESS,
                    message: "✅ Build successful! Build ID: ${env.BUILD_NUMBER}",
                    username: 'jenkins',
                    iconEmoji: ':tada:' 
                )
                try {
                    jiraAddComment idOrKey: env.JIRA_ISSUE, comment: "✅ Build Successful! Build ID: ${env.BUILD_NUMBER}"
                    jiraTransitionIssue idOrKey: env.JIRA_ISSUE, transition: "Done"
                    echo "✅ JIRA Issue ${env.JIRA_ISSUE} updated successfully!"
                } catch (Exception e) {
                    echo "❌ JIRA update failed: ${e.getMessage()}"
                }
            }
        }
        failure {
            script {
                slackSend (
                    channel: env.SLACK_CHANNEL,
                    color: env.SLACK_COLOR_FAILURE,
                    message: "❌ Build failed! Build ID: ${env.BUILD_NUMBER}",
                    username: 'jenkins',
                    iconEmoji: ':no_entry_sign:' 
                )
                try {
                    jiraAddComment idOrKey: env.JIRA_ISSUE, comment: "❌ Build Failed! Build ID: ${env.BUILD_NUMBER}"
                    jiraTransitionIssue idOrKey: env.JIRA_ISSUE, transition: "Reopen"
                } catch (Exception e) {
                    echo "❌ JIRA update failed: ${e.getMessage()}"
                }
            }
        }
    }
}
